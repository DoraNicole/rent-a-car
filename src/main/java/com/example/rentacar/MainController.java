package com.example.rentacar;

import com.example.rentacar.entity.CarData;
import com.example.rentacar.entity.OrderData;
import com.example.rentacar.entity.UserData;
import com.example.rentacar.registration.JwtTokenUtil;
import com.example.rentacar.repository.CarRepository;
import com.example.rentacar.repository.OrderRepository;
import com.example.rentacar.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.sql.Date;
import java.util.HashMap;
import java.util.Map;

@Controller // This means that this class is a Controller
@RequestMapping(path="/rent-a-car") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CarRepository carRepository;
    @Autowired
    private UserRepository userRepository;
    @Autowired
    private OrderRepository orderRepository;

    private final JwtTokenUtil jwtTokenUtil;
    private String token;

    @Autowired
    public MainController(JwtTokenUtil jwtTokenUtil) {
        this.jwtTokenUtil = jwtTokenUtil;
    }

    @PostMapping(path="/addCars")
    public @ResponseBody String addNewCar (@RequestBody Map<String, String> carData) {
        CarData n = new CarData();
        n.setCode(carData.get("code"));
        n.setBrand(carData.get("brand"));
        n.setModel(carData.get("model"));
        n.setNumberChairs(Integer.parseInt(carData.get("nrChairs")));
        n.setAutomatic(Boolean.parseBoolean(carData.get("automatic")));
        n.setNrBigLuggage(Integer.parseInt(carData.get("nrBigLuggage")));
        n.setNrSmallLuggage(Integer.parseInt(carData.get("nrSmallLuggage")));
        n.setLocation(carData.get("location"));
        n.setPricePerDay(Integer.parseInt(carData.get("pricePerDay")));
        n.setAvailable(Boolean.parseBoolean(carData.get("available")));
        carRepository.save(n);
        return "Saved car";
    }

    @CrossOrigin
      @PostMapping(path="/addOrder", consumes = MediaType.APPLICATION_JSON_VALUE)
      public @ResponseBody String addNewOrder (@RequestBody Map<String, String> order) {
        OrderData newOrderData = new OrderData();
        System.out.println(order.get("carId"));
        newOrderData.setCarId(Integer.parseInt(order.get("carId")));
        newOrderData.setPickUpDate(Date.valueOf(order.get("pickUpDate")));
        newOrderData.setReturnDate(Date.valueOf(order.get("returnDate")));
        newOrderData.setPrice(Integer.parseInt(order.get("price")));
        newOrderData.setLocation(order.get("location"));
        System.out.println(jwtTokenUtil.getEmailFromToken(token));
        UserData user = userRepository.findUserDataByEmail(jwtTokenUtil.getEmailFromToken(token));
        newOrderData.setUserId(user.getId());
        orderRepository.save(newOrderData);
        user.setOrders(user.getOrders() + newOrderData.getId().toString());
        userRepository.save(user);
        return "Saved";
      }

    @CrossOrigin
    @PostMapping(path="/login", produces = MediaType.APPLICATION_JSON_VALUE) // Map ONLY POST Requests
    public @ResponseBody Map<String, String> loginUser (@RequestBody Map<String, String> credentials) {
        UserData user = userRepository.findUserDataByEmailAndPassword(
                credentials.get("email"), credentials.get("password"));
        System.out.println(user);
        token = jwtTokenUtil.generateToken(user);
        Map<String, String> ans = new HashMap<>();
        ans.put("token", token);
        return ans;
    }

    @CrossOrigin
    @PostMapping(path="/register")
    public @ResponseBody String registerUser (@RequestBody Map<String, String> data) {
        System.out.println(data);

        UserData newUser = new UserData();
        newUser.setEmail(data.get("email"));
        newUser.setPassword(data.get("password"));
        newUser.setFirstName(data.get("firstName"));
        newUser.setLastName(data.get("lastName"));
        newUser.setOrders("");
        newUser.setPhone(data.get("phone"));
        try {
            userRepository.save(newUser);
        } catch (DataIntegrityViolationException e) {
            return "There is already an existing user with the email provided!";
        }

        return "The account was successfully created! Refresh the page!";
    }

    @CrossOrigin
    @GetMapping(path="/cars", produces = MediaType.APPLICATION_JSON_VALUE)
    public @ResponseBody Iterable<CarData> getAllCars() {
        return carRepository.findAll();
    }
}
